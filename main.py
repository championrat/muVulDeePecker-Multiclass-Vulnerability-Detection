from python.mapping import *
from python.word2vec import *

def comment_remover(text):
    def replacer(match):
        s = match.group(0)
        if s.startswith('/'):
            return " " # note: a space and not an empty string
        else:
            return s
    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)

if __name__ == '__main__':
    with open("data/test.txt") as file: 
        # tách các gadget thành list dựa theobn/  "------------------------------"
        gadget_lists = file.read().split("------------------------------")  
    
    list_label = []
    api_call = []

    # xử lý các gadget chứa dòng trống ở đầu và cuối đoạn
    if gadget_lists[0] == '':
        del gadget_lists[0]
    if gadget_lists[-1] == '' or gadget_lists[-1] == '\n' or gadget_lists[-1] == '\r\n':
        gadget_lists.pop()

    for gadget in gadget_lists:

        program_id = 0
        focus_pointer = 0
        file_name = ""

        # lưu gadget sau khi xóa đi comment
        gadget_rmv_cmt = comment_remover(gadget)

        sentences = gadget_rmv_cmt.splitlines()
        if sentences[0] == '\r' or sentences[0] == '':
            del sentences[0]
        if sentences == []:
            del sentences
        if sentences[-1] == '':
            del sentences[-1]
        if sentences[-1] == '\r':
            del sentences[-1]

        list_label.append(sentences[-1]) 
        '''
        Xử lí định danh cho mỗi gadget. VD: 1 150200/dirent_uri.c memset 405
        '''
        # lấy ra vị trí và danh sách api/function call (VD: memset 405)
        focus_pointer = sentences[0].split(" ")[-2:] 
        # lấy ra tên file (VD: dirent_uri.c)
        file_name = sentences[0].split(" ")[1].split("/")[-1]
        # lấy ra api call
        api_call.append(sentences[0].split(" ")[-2])    

        # encode word to vector
        generateWord2Vec(gadget_rmv_cmt)      
        evaluate_w2vModel("w2c.model")
    #print(api_call)
    #print(list_label)